from src.db.DB import DB
from src.models.pydantic.Request import Request
from src.db.DAOs.RequestsDAO import RequestDAO
from src.db.DAOs.PlaylistsDAO import PlaylistDAO
from src.auth.SpotifyUser import spotify_user

def get_requests() -> list[Request]:
    """Get all requests generated by a user

    Returns:
        list[Request]: Requests they've generated
    """
    
    return(RequestDAO(DB()).read_all(
        {
            'user': spotify_user.oid
        }
    ))

def get_completed_requests() -> list[Request]:
    return (list(filter(lambda r: not not r.playlist_generated, get_requests())))

def get_not_completed_requests() -> list[Request]:
    return (list(filter(lambda r: not r.playlist_generated, get_requests())))

def playlists_by_param(param: str) -> dict[str, int]:
    """Get the count of playlists generated by a user grouped by param

    Args:
        param (str): The param to group by

    Returns:
        dict[str, int]: paramType: count
    """
    return(RequestDAO(DB()).count_playlists_by_param(param))

def playlists_by_language() -> dict[str, int]:
    return(playlists_by_param('language'))

def playlists_by_niche_level() -> dict[str, int]:
    return(playlists_by_param('niche_level'))

def playlists_by_genre() -> dict[str, int]:
    return(playlists_by_param('genre'))

def average_artist_followers_for_generated_playlists() -> int:
    completed_requests = get_completed_requests()
    pdao = PlaylistDAO(DB())
    followers_and_lengths = [(pdao.read_by_id(cr.playlist_generated).length, cr.stats.average_artist_followers) for cr in completed_requests]

    weighted_sum = 0
    total_weights = 0

    # Get the weighted sum
    for length, avg_followers in followers_and_lengths:
        if avg_followers is not None and length is not None:
            weighted_sum += avg_followers * length
            total_weights += length

    # Calculate the weighted average
    if total_weights > 0:
        return(int(weighted_sum / total_weights))
    return(0)

if __name__ == '__main__':
    print(len(get_requests()))
    print(len(get_completed_requests()))
    print(len(get_not_completed_requests()))
    print(playlists_by_genre())
    print(playlists_by_language())
    print(playlists_by_niche_level())
    print(average_artist_followers_for_generated_playlists())